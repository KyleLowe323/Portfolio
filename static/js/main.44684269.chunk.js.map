{"version":3,"sources":["styles/theme.js","components/Footer.js","components/DefaultLayout.js","App.js","serviceWorker.js","index.js"],"names":["theme","background","primary","secondary","tertiary","text","white","lightgray","gray","black","materialShadow","dp","_shadow","Wrapper","styled","div","DiJsBadge","diJsBadge","DiHtml5","diHtml5","DiCss3","diCss3","Footer","Layout","nav","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA+EeA,EA/ED,CACZC,WAAY,CACVC,QAAS,UACTC,UAAW,OACXC,SAAU,IAEZC,KAAM,CACJC,MAAO,OACPC,UAAW,GACXC,KAAM,GACNC,MAAO,IAKTC,eAAgB,SAACC,GACf,IACIC,EAwCJ,OADW,IACHD,GACN,KAAK,EACHC,EAAU,kBACV,MACF,KAAK,EACHA,EAAU,mBACV,MACF,KAAK,EACHA,EAAU,mBACV,MACF,KAAK,GACHA,EAAU,mBACV,MACF,QAAUA,EAAU,kBAGtB,MAAM,uBAAN,OACgBA,EADhB,YAzDe,QAyDf,6BAjBW,IAiBX,e,0nBCrEJ,IAAMC,EAAUC,IAAOC,IAAV,KAUPC,EAAYF,YAAOG,IAAPH,CAAH,KAOTI,EAAUJ,YAAOK,IAAPL,CAAH,KAOPM,EAASN,YAAOO,IAAPP,CAAH,KAeGQ,EAPA,kBACb,kBAACT,EAAD,KACE,kBAACG,EAAD,MACA,kBAACE,EAAD,MACA,kBAACE,EAAD,Q,gRCpCJ,IAAMP,EAAUC,IAAOC,IAAV,KAGG,qBAAEf,MAAiBC,WAAWC,WAiB/BqB,EANA,SAAC,GAAD,EAAEC,IAAF,IAAOC,EAAP,EAAOA,SAAP,OACf,kBAAC,EAAD,KACGA,EACD,kBAAC,EAAD,Q,MCcaC,MA5Bf,WACE,OACE,kBAAC,EAAD,OCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAejC,MAAOA,GACpB,kBAAC,EAAD,OAEFkC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44684269.chunk.js","sourcesContent":["const theme = {\r\n  background: {\r\n    primary: '#121212',\r\n    secondary: '#fff',\r\n    tertiary: '',\r\n  },\r\n  text: {\r\n    white: '#fff',\r\n    lightgray: '',\r\n    gray: '',\r\n    black: ''\r\n  },\r\n  // Mateiral Design Shadow\r\n  // https://github.com/material-components/material-components-web/blob/master/packages/mdc-elevation/_variables.scss\r\n  \r\n  materialShadow: (dp) => {\r\n    const _color = 'black';\r\n    let _shadow;\r\n    let _opacity;\r\n    // // umbra shadow\r\n    // _opacity = 0.2;\r\n    // switch (dp){\r\n    //   case 2:\r\n    //     _shadow = '0px 3px 1px -2px';\r\n    //     break;\r\n    //   case 4:\r\n    //     _shadow = '0px 2px 4px -1px';\r\n    //     break;\r\n    //   case 8:\r\n    //     _shadow = '0px 5px 5px -3px';\r\n    //     break;\r\n    //   case 16:\r\n    //     _shadow = '0px 8px 10px -5px';\r\n    //     break;\r\n    //   default: _shadow = '0px 0px 0px 0px';\r\n    // }\r\n    \r\n    // // penumbra shadow\r\n    // _opacity = 0.14;\r\n    // switch (dp){\r\n    //   case 2:\r\n    //     _shadow = '0px 2px 2px 0px';\r\n    //     break;\r\n    //   case 4:\r\n    //     _shadow = '0px 4px 5px 0px';\r\n    //     break;\r\n    //   case 8:\r\n    //     _shadow = '0px 8px 10px 1px';\r\n    //     break;\r\n    //   case 16:\r\n    //     _shadow ='0px 16px 24px 2px';\r\n    //     break;\r\n    //   default: _shadow = '0px 0px 0px 0px';\r\n    // }\r\n\r\n    // ambient shadow\r\n    _opacity = 0.12;\r\n    switch (dp){\r\n      case 2:\r\n        _shadow = '0px 1px 5px 0px';\r\n        break;\r\n      case 4:\r\n        _shadow = '0px 1px 10px 0px';\r\n        break;\r\n      case 8:\r\n        _shadow = '0px 3px 14px 2px';\r\n        break;\r\n      case 16:\r\n        _shadow = '0px 6px 30px 5px';\r\n        break;\r\n      default:  _shadow = '0px 0px 0px 0px';\r\n    }\r\n\r\n    return `\r\n      box-shadow: ${_shadow} ${_color};\r\n      opacity: ${_opacity};  \r\n    `\r\n  },\r\n}\r\nexport default theme;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {DiJsBadge as diJsBadge, DiHtml5 as diHtml5, DiCss3 as diCss3} from 'react-icons/di';\r\n\r\nconst Wrapper = styled.div`\r\n  grid-area: footer;\r\n  display: flex;\r\n  align-items: center;\r\n  grid-gap: .5em;\r\n  padding: 1em;\r\n  color: white;\r\n  height: 3em;\r\n`;\r\n\r\nconst DiJsBadge = styled(diJsBadge)`\r\n  &&&{\r\n    color: yellow;\r\n    height: 2em;\r\n    width: 2em;\r\n  }\r\n`;\r\nconst DiHtml5 = styled(diHtml5)`\r\n  &&&{\r\n    color: #FF4500;\r\n    height: 2em;\r\n    width: 2em;\r\n  }\r\n`;\r\nconst DiCss3 = styled(diCss3)`\r\n  &&&{\r\n    color: blue;\r\n    height: 2em;\r\n    width: 2em;\r\n  }\r\n`;\r\n\r\nconst Footer = () =>\r\n  <Wrapper>\r\n    <DiJsBadge />\r\n    <DiHtml5 />\r\n    <DiCss3 />\r\n  </Wrapper>\r\n\r\nexport default Footer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Footer from './Footer';\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  background: ${({theme}) => theme.background.primary};\r\n\r\n  display: grid;\r\n  grid-template-rows: auto 1fr auto;\r\n  grid-template-columns: 1fr;\r\n  grid-template-areas:\r\n  'header'\r\n  'body'\r\n  'footer'\r\n`;\r\n\r\nconst Layout = ({nav, children}) =>\r\n<Wrapper>\r\n  {children}\r\n  <Footer />\r\n</Wrapper>\r\n\r\nexport default Layout;","import React from 'react';\nimport styled from 'styled-components';\n// import logo from './logo.svg';\nimport Layout from './components/DefaultLayout';\nimport {FaJsSquare, FaHtml5, FaCss3} from 'react-icons/fa'\nimport JsApiReporter from 'jest-jasmine2/build/jasmine/JsApiReporter';\n\nfunction App() {\n  return (\n    <Layout>\n    </Layout>\n      // <Wrapper>\n      //   {/* <header>\n      //     <p>\n      //       Edit <code>src/App.js</code> and save to reload.\n      //     </p>\n      //     <a\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header> */}\n      //   <Container>\n      //     {/* <Card />\n      //     <Card />\n      //     <Card />\n      //     <Card />\n      //     <Card /> */}\n      //   </Container>\n      // </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {ThemeProvider} from 'styled-components';\nimport theme from './styles/theme'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}